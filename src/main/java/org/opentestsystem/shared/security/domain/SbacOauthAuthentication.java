/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * https://bitbucket.org/sbacoss/eotds/wiki/AIR_Open_Source_License
 ******************************************************************************/
package org.opentestsystem.shared.security.domain;

import java.util.Collection;
import java.util.Map;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;

public class SbacOauthAuthentication implements Authentication {

    private static final long serialVersionUID = 294220296691478029L;
    private final SbacUser sbacUser;
    //Needed to satisfy the Spring Authentication interface
    private Object credentials;

    private Boolean authenticated = null;

    public SbacOauthAuthentication(final SbacUser inSbacUser, final Map<String, ?> inMap) {
        sbacUser = inSbacUser;
        String accessToken = (String) inMap.get("access_token");
        int expiresIn = (Integer) inMap.get("expires_in");
        authenticated = accessToken != null && expiresIn > 0;

    }
    @Override
    public String getName() {
        return sbacUser.getFullName();
    }

    @Override
    public Object getCredentials() {
        return credentials;
    }

    public void setCredentials(final Object inCredentials) {
        credentials = inCredentials;
    }

    @Override
    public Object getDetails() {
        //we don't have anything 'extra' to return
        return null;
    }

    @Override
    public Object getPrincipal() {
        return sbacUser;
    }

    @Override
    public boolean isAuthenticated() {
        //see javadoc for why this is OK--we made authenticated as immutable once set.
        return authenticated != null && authenticated;
    }

    @Override
    public void setAuthenticated(final boolean isAuthenticated) throws IllegalArgumentException {
        //only set if it hasn't been set yet
        authenticated = authenticated == null ? isAuthenticated : authenticated;
    }
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return sbacUser.getAuthorities();
    }

}
