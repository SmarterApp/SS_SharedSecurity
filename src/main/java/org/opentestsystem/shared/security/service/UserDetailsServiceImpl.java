/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * https://bitbucket.org/sbacoss/eotds/wiki/AIR_Open_Source_License
 ******************************************************************************/
package org.opentestsystem.shared.security.service;

import static org.opentestsystem.shared.security.oauth.resource.UserAttributeConstants.EMAIL_KEY;
import static org.opentestsystem.shared.security.oauth.resource.UserAttributeConstants.FIRST_NAME_KEY;
import static org.opentestsystem.shared.security.oauth.resource.UserAttributeConstants.FULL_NAME_KEY;
import static org.opentestsystem.shared.security.oauth.resource.UserAttributeConstants.LAST_NAME_KEY;
import static org.opentestsystem.shared.security.oauth.resource.UserAttributeConstants.PHONE_KEY;
import static org.opentestsystem.shared.security.oauth.resource.UserAttributeConstants.SBAC_TENANCY_CHAIN_KEY;
import static org.opentestsystem.shared.security.oauth.resource.UserAttributeConstants.SBAC_UUID_KEY;

import java.util.Arrays;
import java.util.Map;

import org.apache.commons.lang.math.RandomUtils;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.saml.SAMLCredential;
import org.springframework.security.saml.userdetails.SAMLUserDetailsService;

import com.google.common.collect.Maps;

public class UserDetailsServiceImpl implements SAMLUserDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserDetailsServiceImpl.class);
    private static final int MAX_ERROR_CODE = 100000;

    @Autowired
    private RolesAndPermissionsService rolesAndPermissionsService;

    @Override
    public Object loadUserBySAML(final SAMLCredential samlCred) throws UsernameNotFoundException {
        SbacUser user = null;
        try {
            final String[] pipeDelimitedChain = samlCred.getAttributeAsStringArray(SBAC_TENANCY_CHAIN_KEY);
            LOGGER.warn("tenant chain:" + Arrays.toString(pipeDelimitedChain));

            final Map<String, String> userAtts = extractUserAttributes(samlCred);
            user = this.rolesAndPermissionsService.createUser(pipeDelimitedChain, userAtts, SbacUser.class);

        } catch (final Exception e) {
            final String referenceNumber = String.valueOf(RandomUtils.nextInt(MAX_ERROR_CODE));
            LOGGER.error("failure processing user, reference number: " + referenceNumber, e);
            throw new UsernameNotFoundException("Unable to process user, reference number: " + referenceNumber, e);
        }

        return user;
    }

    private Map<String, String> extractUserAttributes(final SAMLCredential samlCred) {
        final Map<String, String> userAttributes = Maps.newHashMap(SbacUser.BLANK_USER_ATTRIBS);
        populateUserAttribute(samlCred, userAttributes, SbacUser.EMAIL_KEY, EMAIL_KEY);
        populateUserAttribute(samlCred, userAttributes, SbacUser.FIRST_NAME_KEY, FIRST_NAME_KEY);
        populateUserAttribute(samlCred, userAttributes, SbacUser.LAST_NAME_KEY, LAST_NAME_KEY);
        populateUserAttribute(samlCred, userAttributes, SbacUser.FULL_NAME_KEY, FULL_NAME_KEY);
        populateUserAttribute(samlCred, userAttributes, SbacUser.USER_UNIQUE_ID_KEY, SBAC_UUID_KEY);
        populateUserAttribute(samlCred, userAttributes, SbacUser.PHONE_KEY, PHONE_KEY);

        return userAttributes;
    }

    private void populateUserAttribute(final SAMLCredential samlCred, final Map<String, String> userAttributes, final String inAttrKey, final String samlAttrKey) {
        final String attribute = samlCred.getAttributeAsString(samlAttrKey);
        if (attribute != null) {
            userAttributes.put(inAttrKey, attribute);
        }
    }
}
