/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * https://bitbucket.org/sbacoss/eotds/wiki/AIR_Open_Source_License
 ******************************************************************************/
package org.opentestsystem.shared.security.service;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.opentestsystem.shared.progman.client.domain.Tenant;
import org.opentestsystem.shared.security.domain.SbacEntity;
import org.opentestsystem.shared.security.domain.SbacRole;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.domain.TenantContainer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import com.google.common.collect.Maps;

@Service
public class UserServiceImpl implements UserService {
    @Autowired
    private RolesAndPermissionsService rolesAndPermissionsService;

    @Autowired(required=false)
    private TenancyService tenancyService;

    @Override
    public SbacUser getCurrentUser() {
        SbacUser user = null;
        if(SecurityContextHolder.getContext().getAuthentication() != null && SecurityContextHolder.getContext().getAuthentication().getPrincipal() instanceof SbacUser){
            user = (SbacUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        }
        return user;
    }

    @Override
    public TenantContainer getUniqueTenantsForUser() {
        return computeUniqueTenants(getApplicableRoleTenants());
    }

    @Override
    public Map<String, Object> getAssetsForTenant(final String tenantId) {
        Map<String, Object> ret = null;
        final Tenant matchingTenant = getMatchingTenantById(tenantId);
        if (matchingTenant != null) {
            ret = getSkinnableAssets(matchingTenant);
        }
        return ret;
    }

    private Map<String, Object> getSkinnableAssets(final Tenant matchingTenant) {
        final SbacRole matchingRole = findMatchingRole(matchingTenant);
        if (tenancyService != null && matchingRole != null) {
            return this.tenancyService.getSkinnableAssets(matchingRole);
        } else {
            return null;
        }
    }

    private Tenant getMatchingTenantById(final String tenantId) {
        Tenant matchingTenant = null;
        if (StringUtils.isNotEmpty(tenantId)) {
            final TenantContainer chain = getUniqueTenantsForUser();
            matchingTenant = chain.getTenantById(tenantId);
        }
        return matchingTenant;
    }

    private TenantContainer computeUniqueTenants(final List<Tenant> inAllUserTenantsList) {
        final TenantContainer container = new TenantContainer();
        if (inAllUserTenantsList != null) {
            final Map<String, Tenant> uniqueUserTenantsMap = Maps.newHashMap();
            for (final Tenant tenant : inAllUserTenantsList) {
                if (tenant != null) {
                    uniqueUserTenantsMap.put(tenant.getType().getTypeName() + "||" + tenant.getName(), tenant);
                }
            }
            for (final Tenant tenant : uniqueUserTenantsMap.values()) {
                container.addTenant(tenant);
            }
        }
        return container;
    }

    // @Cacheable(value = "UserServiceImpl.getApplicableRoleEntities", key = "#getCurrentUser().getUsername() + #componentName", unless="#result.size() == 0")
    public Set<SbacEntity> getApplicableRoleEntities() {
        // get applicable roles that the user holds
        final Set<SbacEntity> roleEntities = new HashSet<>();
        for (final String roleName : rolesAndPermissionsService.getKnownRoleNames()) {
            final Collection<SbacRole> roles = getCurrentUser().getSbacRole(roleName);
            if (roles != null) {
                for (final SbacRole sbacRole : roles) {
                    roleEntities.add(sbacRole.getEffectiveEntity());
                }
            }
        }
        return roleEntities;
    }

    // @Cacheable(value = "UserServiceImpl.findMatchingRole", key = "#getCurrentUser().getUsername() + #inMatchingTenant.getId() + #componentName", unless="#result == null")
    private SbacRole findMatchingRole(final Tenant inMatchingTenant) {
        // get applicable roles for this component
        for (final String applicableRoleName : rolesAndPermissionsService.getKnownRoleNames()) {
            // get roles this user holds that match
            final Collection<SbacRole> roles = getCurrentUser().getSbacRole(applicableRoleName);
            if (!CollectionUtils.isEmpty(roles)) {
                for (final SbacRole sbacRole : roles) {
                    // spin through the role until we match the given tenant to the role's entity
                    if (sbacRole.getEffectiveEntity().matchesTypeAndName(inMatchingTenant)) {
                        return sbacRole;
                    }
                }
            }
        }
        return null;
    }

    private List<Tenant> getApplicableRoleTenants() {
        // get applicable roles that the user holds
        final List<Tenant> tenants = new ArrayList<>();
        for (final String roleName : rolesAndPermissionsService.getKnownRoleNames()) {
            final Collection<SbacRole> roles = getCurrentUser().getSbacRole(roleName);
            if (roles != null) {
                for (final SbacRole sbacRole : roles) {
                    tenants.add(sbacRole.getEffectiveTenant());
                }
            }
        }
        return tenants;
    }
}
