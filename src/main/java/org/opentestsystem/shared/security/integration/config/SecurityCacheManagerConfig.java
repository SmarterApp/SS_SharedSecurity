/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
/*
Educational Online Test Delivery System Copyright (c) 2013 American Institutes for Research

Distributed under the AIR Open Source License, Version 1.0 See accompanying file AIR-License-1_0.txt or at
http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 */

package org.opentestsystem.shared.security.integration.config;

import net.sf.ehcache.config.CacheConfiguration;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SecurityCacheManagerConfig {

    @Bean(destroyMethod = "shutdown")
    public net.sf.ehcache.CacheManager securityCacheManager() {
        net.sf.ehcache.config.Configuration config = new net.sf.ehcache.config.Configuration();

        // TODO: We should probably configure each cache differently (assuming they need different configuration)
        String[] cacheNames = { "PermissionClient.getPermissionByComponentName", "PermissionClient.getRoles",
                "PermissionClient.getRole", "PermissionClient.getPermissions", "PermissionClient.hasRole",
                "PermissionClient.hasRoleAndLevel", "UserServiceImpl.getKnownRoles",
                "UserServiceImpl.getApplicableRoleEntities", "UserServiceImpl.findMatchingRole",
                "UserServiceImpl.getApplicableRoleTenants" };

        for (String cacheName : cacheNames) {
            CacheConfiguration cacheConfiguration = new CacheConfiguration();
            cacheConfiguration.setName(cacheName);
            cacheConfiguration.setMemoryStoreEvictionPolicy("LRU");
            cacheConfiguration.setMaxEntriesLocalHeap(1000);
            config.addCache(cacheConfiguration);
        }

        config.setName("securityCacheManager");
        config.setUpdateCheck(false);

        return net.sf.ehcache.CacheManager.newInstance(config);
    }

}
