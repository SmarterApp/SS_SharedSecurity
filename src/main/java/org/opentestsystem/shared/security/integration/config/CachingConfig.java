/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2014 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at
 * https://bitbucket.org/sbacoss/eotds/wiki/AIR_Open_Source_License
 ******************************************************************************/
package org.opentestsystem.shared.security.integration.config;

import com.google.common.collect.Lists;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CachingConfigurerSupport;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.ehcache.EhCacheCacheManager;
import org.springframework.cache.interceptor.CacheErrorHandler;
import org.springframework.cache.interceptor.KeyGenerator;
import org.springframework.cache.interceptor.SimpleCacheErrorHandler;
import org.springframework.cache.interceptor.SimpleKeyGenerator;
import org.springframework.cache.support.CompositeCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

/**
 * Spring configuration for caching.
 */
@Configuration
@EnableCaching
public class CachingConfig extends CachingConfigurerSupport {

    /*
     * Autowired list will inject any other spring beans that are of type net.sf.ehcache.CacheManager in order to
     * capture any cache managers configured outside of the security cache.
     */
    @Autowired
    private List<net.sf.ehcache.CacheManager> ehCacheManagers;

    @Bean
    @Override
    public CacheManager cacheManager() {

        final CompositeCacheManager compCacheManager = new CompositeCacheManager();

        final List<CacheManager> managers = Lists.newArrayList();

        for (final net.sf.ehcache.CacheManager ehcacheMan : this.ehCacheManagers) {
            managers.add(new EhCacheCacheManager(ehcacheMan));
        }

        compCacheManager.setCacheManagers(managers);

        return compCacheManager;
    }

    @Bean
    @Override
    public KeyGenerator keyGenerator() {
        return new SimpleKeyGenerator();
    }

    @Override
    public CacheErrorHandler errorHandler() {
        return new SimpleCacheErrorHandler();
    }

}
