/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.security.oauth.resource;

import static org.opentestsystem.shared.security.oauth.resource.UserAttributeConstants.EMAIL_KEY;
import static org.opentestsystem.shared.security.oauth.resource.UserAttributeConstants.FIRST_NAME_KEY;
import static org.opentestsystem.shared.security.oauth.resource.UserAttributeConstants.FULL_NAME_KEY;
import static org.opentestsystem.shared.security.oauth.resource.UserAttributeConstants.LAST_NAME_KEY;
import static org.opentestsystem.shared.security.oauth.resource.UserAttributeConstants.PHONE_KEY;
import static org.opentestsystem.shared.security.oauth.resource.UserAttributeConstants.SBAC_TENANCY_CHAIN_KEY;
import static org.opentestsystem.shared.security.oauth.resource.UserAttributeConstants.SBAC_UUID_KEY;

import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.opentestsystem.shared.security.domain.SbacOauthAuthentication;
import org.opentestsystem.shared.security.domain.SbacUser;
import org.opentestsystem.shared.security.service.RolesAndPermissionsService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;
import org.springframework.security.oauth2.common.OAuth2AccessToken;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.security.oauth2.provider.OAuth2Request;
import org.springframework.security.oauth2.provider.token.AccessTokenConverter;
import org.springframework.security.oauth2.provider.token.DefaultUserAuthenticationConverter;
import org.springframework.security.oauth2.provider.token.UserAuthenticationConverter;

import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

public class SbacTokenConverter implements AccessTokenConverter {

    private UserAuthenticationConverter userTokenConverter = new DefaultUserAuthenticationConverter();

    private static final Logger LOGGER = LoggerFactory.getLogger(SbacTokenConverter.class);

    private static String EXPIRES = "expires_in";

    @Autowired
    private RolesAndPermissionsService rolesAndPermissionsService;

    /**
     * Converter for the part of the data in the token representing a user.
     *
     * @param userTokenConverter the userTokenConverter to set
     */
    public void setUserTokenConverter(final UserAuthenticationConverter userTokenConverter) {
        this.userTokenConverter = userTokenConverter;
    }

    @Override
    public Map<String, ?> convertAccessToken(final OAuth2AccessToken token, final OAuth2Authentication authentication) {
        final Map<String, Object> response = Maps.newHashMap();
        final OAuth2Request clientToken = authentication.getOAuth2Request();

        if (!authentication.isClientOnly()) {
            response.putAll(this.userTokenConverter.convertUserAuthentication(authentication.getUserAuthentication()));
        }

        if (token.getScope() != null) {
            response.put(SCOPE, token.getScope());
        }

        if (token.getExpiration() != null) {
            response.put(EXPIRES, token.getExpiration().getTime() / 1000);
        }

        response.putAll(token.getAdditionalInformation());

        response.put(CLIENT_ID, clientToken.getClientId());
        if (clientToken.getResourceIds() != null && !clientToken.getResourceIds().isEmpty()) {
            response.put(AUD, clientToken.getResourceIds());
        }
        return response;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OAuth2AccessToken extractAccessToken(final String value, final Map<String, ?> map) {
        DefaultOAuth2AccessToken token = new DefaultOAuth2AccessToken(value);
        Map<String, Object> info = new HashMap<String, Object>(map);
        info.remove(EXPIRES);
        info.remove(AUD);
        info.remove(CLIENT_ID);
        info.remove(SCOPE);
        if (map.containsKey(EXPIRES)) {
            long expires = new Date().getTime() + ((Integer) map.get(EXPIRES) * 1000L);
            token.setExpiration(new Date(expires));
        }
        final Collection<String> scope = (Collection<String>) map.get(SCOPE);
        if (scope != null) {
            token.setScope(Sets.newHashSet(scope));
        }
        token.setAdditionalInformation(info);
        return token;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OAuth2Authentication extractAuthentication(final Map<String, ?> map) {
        final Map<String, String> parameters = Maps.newHashMap();
        final Set<String> scope = Sets.newLinkedHashSet(map.containsKey(SCOPE) ? (Collection<String>) map.get(SCOPE) : Collections.<String> emptySet());
        Authentication auth = null;

        // Object grantType = map.get("grant_type");
        String clientId = null;
        final String tenancyChain = (String) map.get(SBAC_TENANCY_CHAIN_KEY);

        clientId = (String) map.get(CLIENT_ID);
        parameters.put(CLIENT_ID, clientId);

        LOGGER.warn("tenant chain:" + tenancyChain);
        if (!StringUtils.isEmpty(tenancyChain)) {
            final Map<String, String> userAttrs = extractUserDetailsFromTokenMap(map);
            final SbacUser sbacUser = this.rolesAndPermissionsService.createUser(tenancyChain, userAttrs, SbacUser.class);
            auth = new SbacOauthAuthentication(sbacUser, map);
            LOGGER.warn("dude built an sbac user");
        } else {
            auth = this.userTokenConverter.extractAuthentication(map);
        }
        if(auth != null && auth instanceof SbacOauthAuthentication){
            LOGGER.warn("***** auth name:" + auth.getName());
        }

        final Set<String> resourceIds = Sets.newLinkedHashSet(map.containsKey(AUD) ? (Collection<String>) map.get(AUD) : Collections.<String> emptySet());
        final OAuth2Request request = new OAuth2Request(parameters, clientId, null, true, scope, resourceIds, null, null, null);
        return new OAuth2Authentication(request, auth);
    }

    private Map<String, String> extractUserDetailsFromTokenMap(final Map<String, ?> map) {
        final Map<String, String> userAttrs = SbacUser.BLANK_USER_ATTRIBS;
        userAttrs.put(SbacUser.EMAIL_KEY, (String) map.get(EMAIL_KEY));
        userAttrs.put(SbacUser.FIRST_NAME_KEY, (String) map.get(FIRST_NAME_KEY));
        userAttrs.put(SbacUser.LAST_NAME_KEY, (String) map.get(LAST_NAME_KEY));
        userAttrs.put(SbacUser.FULL_NAME_KEY, (String) map.get(FULL_NAME_KEY));
        userAttrs.put(SbacUser.USER_UNIQUE_ID_KEY, SBAC_UUID_KEY);
        userAttrs.put(SbacUser.PHONE_KEY, PHONE_KEY);
        return userAttrs;
    }
}
