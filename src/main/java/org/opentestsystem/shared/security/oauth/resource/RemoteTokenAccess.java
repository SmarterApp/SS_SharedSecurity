/*******************************************************************************
 * Educational Online Test Delivery System 
 * Copyright (c) 2014 American Institutes for Research
 *   
 * Distributed under the AIR Open Source License, Version 1.0 
 * See accompanying file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.security.oauth.resource;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.oauth2.common.OAuth2AccessToken;
import org.springframework.security.oauth2.common.exceptions.InvalidGrantException;
import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.security.oauth2.provider.token.AccessTokenConverter;
import org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;
import org.springframework.security.oauth2.provider.token.TokenStore;
import org.springframework.web.client.DefaultResponseErrorHandler;
import org.springframework.web.client.RestOperations;
import org.springframework.web.client.RestTemplate;

public class RemoteTokenAccess implements ResourceServerTokenServices {

    private static final Logger LOGGER = LoggerFactory.getLogger(RemoteTokenAccess.class);

    private RestOperations restTemplate;

    private String checkTokenEndpointUrl;
    
    private String clientId;

    private String clientSecret;

    private TokenStore tokenStore;

    private AccessTokenConverter tokenConverter = new DefaultAccessTokenConverter();

    private static final DefaultResponseErrorHandler NO_BAD_REQ_ERROR_HANDLER = new DefaultResponseErrorHandler() {
        @Override
        // Ignore 400
        public void handleError(final ClientHttpResponse response) throws IOException {
            if (response.getRawStatusCode() != HttpStatus.BAD_REQUEST.value()) {
                super.handleError(response);
            }
        }
    };

    public RemoteTokenAccess() {
        if (this.restTemplate == null) {
            this.restTemplate = new RestTemplate();
            ((RestTemplate) this.restTemplate).setErrorHandler(NO_BAD_REQ_ERROR_HANDLER);
        }
    }

    public void setRestTemplate(final RestOperations restTemplate) {
        this.restTemplate = restTemplate;
    }

    public void setCheckTokenEndpointUrl(final String checkTokenEndpointUrl) {
        this.checkTokenEndpointUrl = checkTokenEndpointUrl;
    }

    public void setClientId(final String clientId) {
        this.clientId = clientId;
    }

    public void setClientSecret(final String clientSecret) {
        this.clientSecret = clientSecret;
    }

    public void setAccessTokenConverter(final AccessTokenConverter accessTokenConverter) {
        this.tokenConverter = accessTokenConverter;
    }
    
    public TokenStore getTokenStore() {
        return tokenStore;
    }

    public void setTokenStore(TokenStore tokenStore) {
        this.tokenStore = tokenStore;
    }
    

    @Override
    public OAuth2Authentication loadAuthentication(final String accessTokenValue) throws AuthenticationException {
        OAuth2Authentication authentication = null;
        LOGGER.warn("Checking Token:" + accessTokenValue);
        OAuth2AccessToken oauthAccessToken = readAccessToken(accessTokenValue);
        if(oauthAccessToken != null){
            if(oauthAccessToken.isExpired()){
                throw new InvalidGrantException("Access token has expired");
            }
            authentication = tokenStore.readAuthentication(oauthAccessToken); 
            LOGGER.warn("found token in tokenStore... expires in " + oauthAccessToken.getExpiresIn());
        }else{
            long start = System.currentTimeMillis();
            Map<String, String> formData = new HashMap<String, String>();
            
            String queryArgs = "&access_token=" + accessTokenValue;
            HttpHeaders headers = new HttpHeaders();
            Map<String, Object> map = new HashMap<String, Object>();
            try {
                map = getForMap(checkTokenEndpointUrl + queryArgs, formData, headers);
                map.put("client_id", clientId);
            } catch (Exception e){
                map.put("error", e.getMessage());
            }
            if (map == null || map.containsKey("error")) {
                LOGGER.debug("check_token returned error: " + map.get("error"));
                throw new InvalidTokenException(accessTokenValue);
            }
            OAuth2AccessToken token = tokenConverter.extractAccessToken(accessTokenValue, map);
            authentication = tokenConverter.extractAuthentication(map);
            long end = System.currentTimeMillis();
            LOGGER.warn("Didn't find token in token store. Verified token in " + (end-start) + " millis");
            tokenStore.storeAccessToken(token, authentication);
        }
        return authentication;
    }

    
   

    @SuppressWarnings({"rawtypes", "unchecked" })
    private Map<String, Object> getForMap(final String path, final Map<String, String> params, final HttpHeaders headers) {
        if (headers.getContentType() == null) {
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        }
        HttpEntity httpEnty =  new HttpEntity(headers);
        Map<String, Object> result = (Map<String, Object>) restTemplate.exchange(path, HttpMethod.GET, httpEnty, Map.class,params).getBody();
        return result;
    }

    @Override
    public OAuth2AccessToken readAccessToken(String accessToken) {
        return tokenStore.readAccessToken(accessToken);
    }

 
}
